package handler

import (
	"encoding/json"
	"log"
	"net/http"
	"time"

	"go-esb/internal/middleware"
	"go-esb/internal/models"
	"go-esb/internal/service"

	"github.com/gorilla/mux"
)

// HTTPHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã
type HTTPHandler struct {
	messageService service.MessageService
	orchestrator   service.Orchestrator
}

// NewHTTPHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func NewHTTPHandler(messageService service.MessageService, orchestrator service.Orchestrator) *HTTPHandler {
	return &HTTPHandler{
		messageService: messageService,
		orchestrator:   orchestrator,
	}
}

// SetupRoutes –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã HTTP API
func (h *HTTPHandler) SetupRoutes() *mux.Router {
	router := mux.NewRouter()

	// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware
	router.Use(middleware.Logger)
	router.Use(middleware.Recovery)

	// Health check
	router.HandleFunc("/health", h.HealthCheck).Methods("GET")

	// API endpoints
	api := router.PathPrefix("/api/v1").Subrouter()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ thread
	api.HandleFunc("/messages/process/{threadId}", h.ProcessMessage).Methods("POST")

	// –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
	api.HandleFunc("/orchestrate/{processName}", h.OrchestrateProcess).Methods("POST")

	// Webhook –¥–ª—è Stripe (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint)
	api.HandleFunc("/webhooks/stripe", h.StripeWebhook).Methods("POST")

	return router
}

// HealthCheck –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
func (h *HTTPHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"status":    "ok",
		"timestamp": time.Now().Unix(),
		"service":   "Go ESB",
	})
}

// ProcessMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ thread
func (h *HTTPHandler) ProcessMessage(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	threadID := vars["threadId"]
	
	direction := r.URL.Query().Get("direction")
	if direction == "" {
		direction = "In"
	}

	var messageData map[string]interface{}
	if err := json.NewDecoder(r.Body).Decode(&messageData); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	data, err := json.Marshal(messageData)
	if err != nil {
		http.Error(w, "Failed to marshal data", http.StatusInternalServerError)
		return
	}

	if err := h.messageService.ProcessMessage(r.Context(), threadID, models.Directions(direction), data); err != nil {
		log.Printf("‚ùå Error processing message: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"status":  "success",
		"message": "Message processed successfully",
	})
}

// OrchestrateProcess –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å
func (h *HTTPHandler) OrchestrateProcess(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	processName := vars["processName"]

	var processData map[string]interface{}
	if err := json.NewDecoder(r.Body).Decode(&processData); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	data, err := json.Marshal(processData)
	if err != nil {
		http.Error(w, "Failed to marshal data", http.StatusInternalServerError)
		return
	}

	if err := h.orchestrator.ExecuteProcess(r.Context(), processName, data); err != nil {
		log.Printf("‚ùå Error executing process: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"status":  "success",
		"message": "Process executed successfully",
		"process": processName,
	})
}

// StripeWebhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Stripe
func (h *HTTPHandler) StripeWebhook(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• Received Stripe webhook")

	var stripeEvent map[string]interface{}
	if err := json.NewDecoder(r.Body).Decode(&stripeEvent); err != nil {
		log.Printf("‚ùå Failed to parse Stripe webhook: %v", err)
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
	eventType, ok := stripeEvent["type"].(string)
	if !ok {
		http.Error(w, "Missing event type", http.StatusBadRequest)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ payment events
	if eventType != "payment_intent.succeeded" && eventType != "charge.succeeded" {
		log.Printf("‚ÑπÔ∏è Skipping event type: %s", eventType)
		w.WriteHeader(http.StatusOK)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
	var paymentData map[string]interface{}
	if data, ok := stripeEvent["data"].(map[string]interface{}); ok {
		if obj, ok := data["object"].(map[string]interface{}); ok {
			paymentData = obj
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	paymentData["event_type"] = eventType
	paymentData["timestamp"] = time.Now().Unix()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
	processData, err := json.Marshal(paymentData)
	if err != nil {
		http.Error(w, "Failed to prepare process data", http.StatusInternalServerError)
		return
	}

	if err := h.orchestrator.ExecuteProcess(r.Context(), "order_payment_flow", processData); err != nil {
		log.Printf("‚ùå Error in order payment flow: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	log.Println("‚úÖ Stripe webhook processed successfully")

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"status": "success",
		"event":  eventType,
	})
}

