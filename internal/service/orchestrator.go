package service

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"go-esb/internal/models"
	"go-esb/internal/repository"

	"github.com/google/uuid"
)

// Orchestrator —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è)
type Orchestrator interface {
	ExecuteProcess(ctx context.Context, processName string, initialData []byte) error
}

type orchestrator struct {
	messageService   MessageService
	threadRouteRepo  repository.ThreadRouteRepository
	routeRepo        repository.RouteRepository
	connectionRepo   repository.ConnectionRepository
	systemRepo       repository.SystemRepository
}

// NewOrchestrator —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
func NewOrchestrator(
	messageService MessageService,
	threadRouteRepo repository.ThreadRouteRepository,
	routeRepo repository.RouteRepository,
	connectionRepo repository.ConnectionRepository,
	systemRepo repository.SystemRepository,
) Orchestrator {
	return &orchestrator{
		messageService:   messageService,
		threadRouteRepo:  threadRouteRepo,
		routeRepo:        routeRepo,
		connectionRepo:   connectionRepo,
		systemRepo:       systemRepo,
	}
}

// OrderProcessingFlow –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
type OrderProcessingFlow struct {
	StripePaymentData map[string]interface{} `json:"stripe_payment_data"`
	SAPOrderData      map[string]interface{} `json:"sap_order_data"`
	SalesforceData    map[string]interface{} `json:"salesforce_data"`
}

// ExecuteProcess –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å
func (o *orchestrator) ExecuteProcess(ctx context.Context, processName string, initialData []byte) error {
	log.Printf("üéØ Starting process: %s", processName)

	switch processName {
	case "order_payment_flow":
		return o.orderPaymentFlow(ctx, initialData)
	default:
		return fmt.Errorf("unknown process: %s", processName)
	}
}

// orderPaymentFlow —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ—Ç–æ–∫: Stripe ‚Üí SAP ‚Üí Salesforce
func (o *orchestrator) orderPaymentFlow(ctx context.Context, stripeData []byte) error {
	flowStartTime := time.Now()
	log.Printf("üîÑ Order Payment Flow started")

	flow := &OrderProcessingFlow{}

	// –®–∞–≥ 1: –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Stripe
	if err := json.Unmarshal(stripeData, &flow.StripePaymentData); err != nil {
		return fmt.Errorf("failed to parse Stripe data: %w", err)
	}

	log.Printf("üì• Received payment data from Stripe: %+v", flow.StripePaymentData)

	// –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º thread –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SAP
	// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ thread ID –∏–∑–≤–µ—Å—Ç–µ–Ω (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
	// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º—ã
	
	// –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É SAP (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î)
	systems, err := o.systemRepo.GetAll(ctx)
	if err != nil {
		return fmt.Errorf("failed to get systems: %w", err)
	}

	var sapSystemID, salesforceSystemID uuid.UUID
	for _, sys := range systems {
		if sys.Name == "SAP" {
			sapSystemID = sys.Ref
		}
		if sys.Name == "Salesforce" {
			salesforceSystemID = sys.Ref
		}
	}

	if sapSystemID == uuid.Nil {
		return fmt.Errorf("SAP system not found")
	}

	// –®–∞–≥ 3: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Stripe –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è SAP
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ XML –¥–ª—è SAP SOAP
	flow.SAPOrderData = o.transformStripeToSAP(flow.StripePaymentData)
	
	sapData, err := json.Marshal(flow.SAPOrderData)
	if err != nil {
		return fmt.Errorf("failed to marshal SAP data: %w", err)
	}

	// –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ SAP —á–µ—Ä–µ–∑ thread (–Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ thread –¥–ª—è SAP)
	// –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ MessageService
	// –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ thread –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	
	// –í—Ä–µ–º–µ–Ω–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è SAP –∑–∞–ø—Ä–æ—Å–∞
	sapCtx, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()

	// –ò—â–µ–º thread –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SAP
	// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–∑–¥–∞–¥–∏–º –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ thread
	threadID, err := o.findThreadForSystem(ctx, sapSystemID, models.DirectionOut)
	if err != nil {
		return fmt.Errorf("failed to find SAP thread: %w", err)
	}

	log.Printf("üì§ Sending to SAP via thread: %s", threadID)
	if err := o.messageService.RouteMessage(sapCtx, threadID, models.DirectionOut, sapData); err != nil {
		return fmt.Errorf("failed to send to SAP: %w", err)
	}

	log.Printf("‚úÖ SAP confirmed order update")

	// –®–∞–≥ 5: –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è SAP –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Salesforce
	if salesforceSystemID == uuid.Nil {
		log.Printf("‚ö†Ô∏è Salesforce system not found, skipping")
		return nil
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Salesforce
	flow.SalesforceData = o.transformSAPToSalesforce(flow.SAPOrderData)
	salesforceData, err := json.Marshal(flow.SalesforceData)
	if err != nil {
		return fmt.Errorf("failed to marshal Salesforce data: %w", err)
	}

	// –ò—â–µ–º thread –¥–ª—è Salesforce
	salesforceThreadID, err := o.findThreadForSystem(ctx, salesforceSystemID, models.DirectionOut)
	if err != nil {
		return fmt.Errorf("failed to find Salesforce thread: %w", err)
	}

	salesforceCtx, cancel2 := context.WithTimeout(ctx, 5*time.Second)
	defer cancel2()

	log.Printf("üì§ Sending to Salesforce via thread: %s", salesforceThreadID)
	if err := o.messageService.RouteMessage(salesforceCtx, salesforceThreadID, models.DirectionOut, salesforceData); err != nil {
		return fmt.Errorf("failed to send to Salesforce: %w", err)
	}

	duration := time.Since(flowStartTime)
	log.Printf("üéâ Order Payment Flow completed in %v", duration)

	if duration > 5*time.Second {
		log.Printf("‚ö†Ô∏è Flow took longer than 5 seconds target")
	}

	return nil
}

// transformStripeToSAP –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Stripe –≤ —Ñ–æ—Ä–º–∞—Ç SAP
func (o *orchestrator) transformStripeToSAP(stripeData map[string]interface{}) map[string]interface{} {
	sapData := make(map[string]interface{})
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Stripe –∏ –º–∞–ø–∏–º –Ω–∞ SAP —Ñ–æ—Ä–º–∞—Ç
	if orderID, ok := stripeData["order_id"].(string); ok {
		sapData["OrderNumber"] = orderID
	}
	if amount, ok := stripeData["amount"].(float64); ok {
		sapData["Amount"] = amount / 100 // Stripe —Ö—Ä–∞–Ω–∏—Ç –≤ —Ü–µ–Ω—Ç–∞—Ö
	}
	if currency, ok := stripeData["currency"].(string); ok {
		sapData["Currency"] = currency
	}
	if status, ok := stripeData["status"].(string); ok {
		sapData["PaymentStatus"] = status
	}
	if customerID, ok := stripeData["customer_id"].(string); ok {
		sapData["CustomerID"] = customerID
	}

	sapData["PaymentGateway"] = "Stripe"
	sapData["Timestamp"] = time.Now().Format(time.RFC3339)

	return sapData
}

// transformSAPToSalesforce –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ SAP –≤ —Ñ–æ—Ä–º–∞—Ç Salesforce
func (o *orchestrator) transformSAPToSalesforce(sapData map[string]interface{}) map[string]interface{} {
	salesforceData := make(map[string]interface{})
	
	if orderNum, ok := sapData["OrderNumber"].(string); ok {
		salesforceData["OrderId"] = orderNum
	}
	if status, ok := sapData["PaymentStatus"].(string); ok {
		// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
		if status == "succeeded" {
			salesforceData["Status"] = "Paid"
		} else {
			salesforceData["Status"] = status
		}
	}
	if amount, ok := sapData["Amount"].(float64); ok {
		salesforceData["Amount"] = amount
	}
	if currency, ok := sapData["Currency"].(string); ok {
		salesforceData["Currency"] = currency
	}
	if customerID, ok := sapData["CustomerID"].(string); ok {
		salesforceData["AccountId"] = customerID
	}

	salesforceData["LastModifiedDate"] = time.Now().Format(time.RFC3339)

	return salesforceData
}

// findThreadForSystem –Ω–∞—Ö–æ–¥–∏—Ç thread –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
func (o *orchestrator) findThreadForSystem(ctx context.Context, systemID uuid.UUID, direction models.Directions) (uuid.UUID, error) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ routes –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
	routes, err := o.routeRepo.GetBySystem(ctx, systemID)
	if err != nil {
		return uuid.Nil, err
	}

	if len(routes) == 0 {
		return uuid.Nil, fmt.Errorf("no routes found for system %s", systemID)
	}

	// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π route
	targetRoute := routes[0]

	// –ò—â–µ–º thread route –ø–æ route ID
	threadRoute, err := o.threadRouteRepo.GetThreadRouteByRouteID(ctx, targetRoute.Ref)
	if err != nil {
		return uuid.Nil, fmt.Errorf("no thread route found for route %s: %w", targetRoute.Ref, err)
	}

	if threadRoute.Direction != direction {
		return uuid.Nil, fmt.Errorf("thread route direction mismatch: expected %s, got %s", direction, threadRoute.Direction)
	}

	return threadRoute.Thread, nil
}

